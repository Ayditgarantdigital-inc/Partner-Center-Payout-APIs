// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace PartnerCenterPayoutAPISampleCode
{
    using System.Net.Http;
    using System.Net.Http.Headers;

    /// <summary>
    /// Contains actions or methods that can be performed related to Partner Center Payout - Transaction History.
    /// </summary>
    public class TransactionHistory
    {
        private static HttpClient _httpClient = new HttpClient();
        private static string domain = "https://api.partner.microsoft-int.com/";
        private static string basePath = "v1.0/payouts/";
        private static string resource = "transactionhistory";

        /// <summary>
        /// Creates a new Partner Center Payout Transaction History request.
        /// </summary>
        /// <param name="accessToken">AAD token generated by the UserCredentialTokenGenerator</param>
        /// <returns>Standard Http Response from the API</returns>
        public static HttpResponseMessage CreateRequest(string accessToken)
        {
            string createTransactionHistoryRequestURI = domain + basePath + resource + "?$filter=earningForDate ge 2019-09-12T00:00:00.000Z and earningForDate lt 2019-09-18T00:00:00.000Z";

            HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Post, createTransactionHistoryRequestURI);
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            HttpResponseMessage response = _httpClient.SendAsync(requestMessage).Result;

            return response;
        }

        /// <summary>
        /// Gets the status of an existing Partner Center Payout Transaction History request.
        /// </summary>
        /// <param name="accessToken">AAD token generated by the UserCredentialTokenGenerator</param>
        /// <param name="requestId">requestId</param>
        /// <returns>Standard Http Response from the API</returns>
        public static HttpResponseMessage GetRequest(string accessToken, string requestId)
        {
            var transactionHistoryStatusUrl = domain + basePath + resource + "/" + requestId;

            HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Get, transactionHistoryStatusUrl);
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            HttpResponseMessage response = _httpClient.SendAsync(requestMessage).Result;

            return response;
        }

        /// <summary>
        /// Deletes an existing Partner Center Payout Transaction History request.
        /// </summary>
        /// <param name="accessToken">AAD token generated by the UserCredentialTokenGenerator</param>
        /// <param name="requestId">requestId</param>
        /// <returns>Standard Http Response from the API</returns>
        public static HttpResponseMessage DeleteRequest(string accessToken, string requestId)
        {
            string deleteTransactionHistoryRequestURI = domain + basePath + resource + "/" + requestId;

            HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Delete, deleteTransactionHistoryRequestURI);
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            HttpResponseMessage response = _httpClient.SendAsync(requestMessage).Result;

            return response;
        }
    }
}